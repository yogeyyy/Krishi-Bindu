// controllers/event_controller.go
package controllers

import (
	"Server/db"
	"Server/models"
	"context"
	"net/http"

	"cloud.google.com/go/firestore"
	"github.com/gin-gonic/gin"
)

func CreateEvent(c *gin.Context) {
	var event models.Event
	if err := c.ShouldBindJSON(&event); err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"error": err.Error()})
		return
	}

	// Add the event to Firestore
	docRef, _, err := db.FirestoreClient.Collection("events").Add(context.Background(), event)
	if err != nil {
		c.JSON(http.StatusInternalServerError, gin.H{"error": "Failed to create event"})
		return
	}

	// Assign the ID field with the UID generated by Firestore
	event.ID = docRef.ID

	// Update the ID field in Firestore document
	_, err = docRef.Update(context.Background(), []firestore.Update{
		{Path: "ID", Value: event.ID},
	})
	if err != nil {
		c.JSON(http.StatusInternalServerError, gin.H{"error": "Failed to update ID in Firestore"})
		return
	}

	c.JSON(http.StatusCreated, gin.H{"message": "Event created successfully", "id": event.ID})
}

func GetEvents(c *gin.Context) {
	events := []models.Event{}

	iter := db.FirestoreClient.Collection("events").Documents(context.Background())
	for {
		docSnapshot, err := iter.Next()
		if err != nil {
			break
		}

		var event models.Event
		docSnapshot.DataTo(&event)
		event.ID = docSnapshot.Ref.ID

		events = append(events, event)
	}

	c.JSON(http.StatusOK, events)
}

func GetEventByID(c *gin.Context) {
	eventID := c.Param("id")

	docSnapshot, err := db.FirestoreClient.Collection("events").Doc(eventID).Get(context.Background())
	if err != nil {
		c.JSON(http.StatusNotFound, gin.H{"error": "Event not found"})
		return
	}

	var event models.Event
	docSnapshot.DataTo(&event)
	event.ID = docSnapshot.Ref.ID

	c.JSON(http.StatusOK, event)
}

func UpdateEvent(c *gin.Context) {
	eventID := c.Param("id")

	// Retrieve the existing event document from Firestore
	eventRef := db.FirestoreClient.Collection("events").Doc(eventID)
	_, err := eventRef.Get(context.Background())
	if err != nil {
		c.JSON(http.StatusInternalServerError, gin.H{"error": "Failed to retrieve event"})
		return
	}

	// Bind the JSON request body to the updatedEvent model
	var updatedEvent models.Event
	if err := c.ShouldBindJSON(&updatedEvent); err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"error": err.Error()})
		return
	}

	// Update only the specified fields in the existing event document
	fieldsToUpdate := map[string]interface{}{
		"Title":       updatedEvent.Title,
		"Date":        updatedEvent.Date,
		"Location":    updatedEvent.Location,
		"Description": updatedEvent.Description,
		"Banner":      updatedEvent.Banner,
	}

	// Perform the update operation on Firestore
	_, err = eventRef.Set(context.Background(), fieldsToUpdate, firestore.MergeAll)
	if err != nil {
		c.JSON(http.StatusInternalServerError, gin.H{"error": "Failed to update event"})
		return
	}

	c.JSON(http.StatusOK, gin.H{"message": "Event updated successfully"})
}

func DeleteEvent(c *gin.Context) {
	eventID := c.Param("id")

	// Retrieve the event document
	eventRef := db.FirestoreClient.Collection("events").Doc(eventID)
	eventDoc, err := eventRef.Get(context.Background())
	if err != nil {
		c.JSON(http.StatusInternalServerError, gin.H{"error": "Failed to retrieve event"})
		return
	}

	// Get the NGO ID associated with the event
	var event models.Event
	if err := eventDoc.DataTo(&event); err != nil {
		c.JSON(http.StatusInternalServerError, gin.H{"error": "Failed to parse event data"})
		return
	}
	ngoID := event.OrganizerID

	// Delete the event document
	_, err = eventRef.Delete(context.Background())
	if err != nil {
		c.JSON(http.StatusInternalServerError, gin.H{"error": "Failed to delete event"})
		return
	}

	// Remove the event ID from the NGO's events array
	ngoRef := db.FirestoreClient.Collection(ngosCollection).Doc(ngoID)
	err = db.FirestoreClient.RunTransaction(context.Background(), func(ctx context.Context, tx *firestore.Transaction) error {
		// Get the current events array of the NGO
		docSnap, err := tx.Get(ngoRef)
		if err != nil {
			return err
		}

		var ngo models.NGO
		if err := docSnap.DataTo(&ngo); err != nil {
			return err
		}

		// Find and remove the event ID from the array
		var updatedEvents []string
		for _, eID := range ngo.Events {
			if eID != eventID {
				updatedEvents = append(updatedEvents, eID)
			}
		}
		ngo.Events = updatedEvents

		// Update the NGO document in Firestore
		if err := tx.Set(ngoRef, ngo); err != nil {
			return err
		}

		return nil
	})
	if err != nil {
		c.JSON(http.StatusInternalServerError, gin.H{"error": "Failed to update NGO"})
		return
	}

	// Remove the event ID from the myEvents array of all users who participated in the event
	participants := event.Participants
	for _, userID := range participants {
		userRef := db.FirestoreClient.Collection(usersCollection).Doc(userID)
		_, err := userRef.Update(context.Background(), []firestore.Update{
			{Path: "MyEvents", Value: firestore.ArrayRemove(eventID)},
		})
		if err != nil {
			c.JSON(http.StatusInternalServerError, gin.H{"error": "Failed to update user's myEvents field"})
			return
		}
	}

	c.JSON(http.StatusOK, gin.H{"message": "Event deleted successfully"})
}

// RegisterUserForEvent registers a user for an event
func RegisterUserForEvent(c *gin.Context) {
	eventID := c.Param("id")
	userID := c.Query("user") // Assuming user ID is stored in the request context

	// Retrieve the event from the database
	eventRef := db.FirestoreClient.Collection("events").Doc(eventID)
	_, err := eventRef.Get(context.Background())
	if err != nil {
		c.JSON(http.StatusInternalServerError, gin.H{"error": "Failed to retrieve event"})
		return
	}

	// Update the participants list for the event
	_, err = eventRef.Update(context.Background(), []firestore.Update{
		{Path: "Participants", Value: firestore.ArrayUnion(userID)},
	})
	if err != nil {
		c.JSON(http.StatusInternalServerError, gin.H{"error": "Failed to register user for event"})
		return
	}

	// Add the event ID to the user's myEvents field
	userRef := db.FirestoreClient.Collection("users").Doc(userID)
	_, err = userRef.Update(context.Background(), []firestore.Update{
		{Path: "MyEvents", Value: firestore.ArrayUnion(eventID)},
	})
	if err != nil {
		c.JSON(http.StatusInternalServerError, gin.H{"error": "Failed to update user's MyEvents field"})
		return
	}

	c.JSON(http.StatusOK, gin.H{"message": "User registered successfully for the event"})
}
